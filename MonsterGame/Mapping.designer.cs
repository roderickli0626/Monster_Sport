#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MonsterGame
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Monster_Game")]
	public partial class MappingDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertTeam(Team instance);
    partial void UpdateTeam(Team instance);
    partial void DeleteTeam(Team instance);
    partial void InsertTeamsForGame(TeamsForGame instance);
    partial void UpdateTeamsForGame(TeamsForGame instance);
    partial void DeleteTeamsForGame(TeamsForGame instance);
    partial void InsertTicket(Ticket instance);
    partial void UpdateTicket(Ticket instance);
    partial void DeleteTicket(Ticket instance);
    partial void InsertPaymentResult(PaymentResult instance);
    partial void UpdatePaymentResult(PaymentResult instance);
    partial void DeletePaymentResult(PaymentResult instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    partial void InsertMovement(Movement instance);
    partial void UpdateMovement(Movement instance);
    partial void DeleteMovement(Movement instance);
    partial void InsertTicketResult(TicketResult instance);
    partial void UpdateTicketResult(TicketResult instance);
    partial void DeleteTicketResult(TicketResult instance);
    partial void InsertResult(Result instance);
    partial void UpdateResult(Result instance);
    partial void DeleteResult(Result instance);
    partial void InsertNotification(Notification instance);
    partial void UpdateNotification(Notification instance);
    partial void DeleteNotification(Notification instance);
    partial void InsertGameBoard(GameBoard instance);
    partial void UpdateGameBoard(GameBoard instance);
    partial void DeleteGameBoard(GameBoard instance);
    partial void InsertFeedback(Feedback instance);
    partial void UpdateFeedback(Feedback instance);
    partial void DeleteFeedback(Feedback instance);
    partial void InsertWinner(Winner instance);
    partial void UpdateWinner(Winner instance);
    partial void DeleteWinner(Winner instance);
    partial void InsertGame(Game instance);
    partial void UpdateGame(Game instance);
    partial void DeleteGame(Game instance);
    #endregion
		
		public MappingDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MappingDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MappingDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MappingDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Team> Teams
		{
			get
			{
				return this.GetTable<Team>();
			}
		}
		
		public System.Data.Linq.Table<TeamsForGame> TeamsForGames
		{
			get
			{
				return this.GetTable<TeamsForGame>();
			}
		}
		
		public System.Data.Linq.Table<Ticket> Tickets
		{
			get
			{
				return this.GetTable<Ticket>();
			}
		}
		
		public System.Data.Linq.Table<PaymentResult> PaymentResults
		{
			get
			{
				return this.GetTable<PaymentResult>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		public System.Data.Linq.Table<Movement> Movements
		{
			get
			{
				return this.GetTable<Movement>();
			}
		}
		
		public System.Data.Linq.Table<TicketResult> TicketResults
		{
			get
			{
				return this.GetTable<TicketResult>();
			}
		}
		
		public System.Data.Linq.Table<Result> Results
		{
			get
			{
				return this.GetTable<Result>();
			}
		}
		
		public System.Data.Linq.Table<Notification> Notifications
		{
			get
			{
				return this.GetTable<Notification>();
			}
		}
		
		public System.Data.Linq.Table<GameBoard> GameBoards
		{
			get
			{
				return this.GetTable<GameBoard>();
			}
		}
		
		public System.Data.Linq.Table<Feedback> Feedbacks
		{
			get
			{
				return this.GetTable<Feedback>();
			}
		}
		
		public System.Data.Linq.Table<Winner> Winners
		{
			get
			{
				return this.GetTable<Winner>();
			}
		}
		
		public System.Data.Linq.Table<Game> Games
		{
			get
			{
				return this.GetTable<Game>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Team")]
	public partial class Team : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Description;
		
		private string _Note;
		
		private EntitySet<TeamsForGame> _TeamsForGames;
		
		private EntitySet<TicketResult> _TicketResults;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnNoteChanging(string value);
    partial void OnNoteChanged();
    #endregion
		
		public Team()
		{
			this._TeamsForGames = new EntitySet<TeamsForGame>(new Action<TeamsForGame>(this.attach_TeamsForGames), new Action<TeamsForGame>(this.detach_TeamsForGames));
			this._TicketResults = new EntitySet<TicketResult>(new Action<TicketResult>(this.attach_TicketResults), new Action<TicketResult>(this.detach_TicketResults));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(50)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Note", DbType="VarChar(MAX)")]
		public string Note
		{
			get
			{
				return this._Note;
			}
			set
			{
				if ((this._Note != value))
				{
					this.OnNoteChanging(value);
					this.SendPropertyChanging();
					this._Note = value;
					this.SendPropertyChanged("Note");
					this.OnNoteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Team_TeamsForGame", Storage="_TeamsForGames", ThisKey="Id", OtherKey="TeamID")]
		public EntitySet<TeamsForGame> TeamsForGames
		{
			get
			{
				return this._TeamsForGames;
			}
			set
			{
				this._TeamsForGames.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Team_TicketResult", Storage="_TicketResults", ThisKey="Id", OtherKey="TeamID")]
		public EntitySet<TicketResult> TicketResults
		{
			get
			{
				return this._TicketResults;
			}
			set
			{
				this._TicketResults.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TeamsForGames(TeamsForGame entity)
		{
			this.SendPropertyChanging();
			entity.Team = this;
		}
		
		private void detach_TeamsForGames(TeamsForGame entity)
		{
			this.SendPropertyChanging();
			entity.Team = null;
		}
		
		private void attach_TicketResults(TicketResult entity)
		{
			this.SendPropertyChanging();
			entity.Team = this;
		}
		
		private void detach_TicketResults(TicketResult entity)
		{
			this.SendPropertyChanging();
			entity.Team = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TeamsForGame")]
	public partial class TeamsForGame : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<int> _GameID;
		
		private System.Nullable<int> _TeamID;
		
		private string _Note;
		
		private EntitySet<Result> _Results;
		
		private EntityRef<Team> _Team;
		
		private EntityRef<Game> _Game;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnGameIDChanging(System.Nullable<int> value);
    partial void OnGameIDChanged();
    partial void OnTeamIDChanging(System.Nullable<int> value);
    partial void OnTeamIDChanged();
    partial void OnNoteChanging(string value);
    partial void OnNoteChanged();
    #endregion
		
		public TeamsForGame()
		{
			this._Results = new EntitySet<Result>(new Action<Result>(this.attach_Results), new Action<Result>(this.detach_Results));
			this._Team = default(EntityRef<Team>);
			this._Game = default(EntityRef<Game>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GameID", DbType="Int")]
		public System.Nullable<int> GameID
		{
			get
			{
				return this._GameID;
			}
			set
			{
				if ((this._GameID != value))
				{
					if (this._Game.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGameIDChanging(value);
					this.SendPropertyChanging();
					this._GameID = value;
					this.SendPropertyChanged("GameID");
					this.OnGameIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeamID", DbType="Int")]
		public System.Nullable<int> TeamID
		{
			get
			{
				return this._TeamID;
			}
			set
			{
				if ((this._TeamID != value))
				{
					if (this._Team.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTeamIDChanging(value);
					this.SendPropertyChanging();
					this._TeamID = value;
					this.SendPropertyChanged("TeamID");
					this.OnTeamIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Note", DbType="VarChar(MAX)")]
		public string Note
		{
			get
			{
				return this._Note;
			}
			set
			{
				if ((this._Note != value))
				{
					this.OnNoteChanging(value);
					this.SendPropertyChanging();
					this._Note = value;
					this.SendPropertyChanged("Note");
					this.OnNoteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TeamsForGame_Result", Storage="_Results", ThisKey="Id", OtherKey="TeamForGameID")]
		public EntitySet<Result> Results
		{
			get
			{
				return this._Results;
			}
			set
			{
				this._Results.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Team_TeamsForGame", Storage="_Team", ThisKey="TeamID", OtherKey="Id", IsForeignKey=true, DeleteRule="CASCADE")]
		public Team Team
		{
			get
			{
				return this._Team.Entity;
			}
			set
			{
				Team previousValue = this._Team.Entity;
				if (((previousValue != value) 
							|| (this._Team.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Team.Entity = null;
						previousValue.TeamsForGames.Remove(this);
					}
					this._Team.Entity = value;
					if ((value != null))
					{
						value.TeamsForGames.Add(this);
						this._TeamID = value.Id;
					}
					else
					{
						this._TeamID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Team");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Game_TeamsForGame", Storage="_Game", ThisKey="GameID", OtherKey="Id", IsForeignKey=true, DeleteRule="CASCADE")]
		public Game Game
		{
			get
			{
				return this._Game.Entity;
			}
			set
			{
				Game previousValue = this._Game.Entity;
				if (((previousValue != value) 
							|| (this._Game.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Game.Entity = null;
						previousValue.TeamsForGames.Remove(this);
					}
					this._Game.Entity = value;
					if ((value != null))
					{
						value.TeamsForGames.Add(this);
						this._GameID = value.Id;
					}
					else
					{
						this._GameID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Game");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Results(Result entity)
		{
			this.SendPropertyChanging();
			entity.TeamsForGame = this;
		}
		
		private void detach_Results(Result entity)
		{
			this.SendPropertyChanging();
			entity.TeamsForGame = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Ticket")]
	public partial class Ticket : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<int> _UserID;
		
		private System.Nullable<int> _GameID;
		
		private System.Nullable<System.DateTime> _GetDate;
		
		private string _Note;
		
		private EntitySet<TicketResult> _TicketResults;
		
		private EntityRef<User> _User;
		
		private EntityRef<Game> _Game;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnUserIDChanging(System.Nullable<int> value);
    partial void OnUserIDChanged();
    partial void OnGameIDChanging(System.Nullable<int> value);
    partial void OnGameIDChanged();
    partial void OnGetDateChanging(System.Nullable<System.DateTime> value);
    partial void OnGetDateChanged();
    partial void OnNoteChanging(string value);
    partial void OnNoteChanged();
    #endregion
		
		public Ticket()
		{
			this._TicketResults = new EntitySet<TicketResult>(new Action<TicketResult>(this.attach_TicketResults), new Action<TicketResult>(this.detach_TicketResults));
			this._User = default(EntityRef<User>);
			this._Game = default(EntityRef<Game>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int")]
		public System.Nullable<int> UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GameID", DbType="Int")]
		public System.Nullable<int> GameID
		{
			get
			{
				return this._GameID;
			}
			set
			{
				if ((this._GameID != value))
				{
					if (this._Game.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGameIDChanging(value);
					this.SendPropertyChanging();
					this._GameID = value;
					this.SendPropertyChanged("GameID");
					this.OnGameIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GetDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> GetDate
		{
			get
			{
				return this._GetDate;
			}
			set
			{
				if ((this._GetDate != value))
				{
					this.OnGetDateChanging(value);
					this.SendPropertyChanging();
					this._GetDate = value;
					this.SendPropertyChanged("GetDate");
					this.OnGetDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Note", DbType="VarChar(MAX)")]
		public string Note
		{
			get
			{
				return this._Note;
			}
			set
			{
				if ((this._Note != value))
				{
					this.OnNoteChanging(value);
					this.SendPropertyChanging();
					this._Note = value;
					this.SendPropertyChanged("Note");
					this.OnNoteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Ticket_TicketResult", Storage="_TicketResults", ThisKey="Id", OtherKey="TicketID")]
		public EntitySet<TicketResult> TicketResults
		{
			get
			{
				return this._TicketResults;
			}
			set
			{
				this._TicketResults.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Ticket", Storage="_User", ThisKey="UserID", OtherKey="Id", IsForeignKey=true, DeleteRule="CASCADE")]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Tickets.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Tickets.Add(this);
						this._UserID = value.Id;
					}
					else
					{
						this._UserID = default(Nullable<int>);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Game_Ticket", Storage="_Game", ThisKey="GameID", OtherKey="Id", IsForeignKey=true, DeleteRule="CASCADE")]
		public Game Game
		{
			get
			{
				return this._Game.Entity;
			}
			set
			{
				Game previousValue = this._Game.Entity;
				if (((previousValue != value) 
							|| (this._Game.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Game.Entity = null;
						previousValue.Tickets.Remove(this);
					}
					this._Game.Entity = value;
					if ((value != null))
					{
						value.Tickets.Add(this);
						this._GameID = value.Id;
					}
					else
					{
						this._GameID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Game");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TicketResults(TicketResult entity)
		{
			this.SendPropertyChanging();
			entity.Ticket = this;
		}
		
		private void detach_TicketResults(TicketResult entity)
		{
			this.SendPropertyChanging();
			entity.Ticket = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PaymentResults")]
	public partial class PaymentResult : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<int> _UserID;
		
		private System.Nullable<System.DateTime> _DateOfPay;
		
		private System.Nullable<double> _Amount;
		
		private string _PaypalTransition;
		
		private string _Note;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnUserIDChanging(System.Nullable<int> value);
    partial void OnUserIDChanged();
    partial void OnDateOfPayChanging(System.Nullable<System.DateTime> value);
    partial void OnDateOfPayChanged();
    partial void OnAmountChanging(System.Nullable<double> value);
    partial void OnAmountChanged();
    partial void OnPaypalTransitionChanging(string value);
    partial void OnPaypalTransitionChanged();
    partial void OnNoteChanging(string value);
    partial void OnNoteChanged();
    #endregion
		
		public PaymentResult()
		{
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int")]
		public System.Nullable<int> UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateOfPay", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateOfPay
		{
			get
			{
				return this._DateOfPay;
			}
			set
			{
				if ((this._DateOfPay != value))
				{
					this.OnDateOfPayChanging(value);
					this.SendPropertyChanging();
					this._DateOfPay = value;
					this.SendPropertyChanged("DateOfPay");
					this.OnDateOfPayChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Amount", DbType="Float")]
		public System.Nullable<double> Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PaypalTransition", DbType="VarChar(MAX)")]
		public string PaypalTransition
		{
			get
			{
				return this._PaypalTransition;
			}
			set
			{
				if ((this._PaypalTransition != value))
				{
					this.OnPaypalTransitionChanging(value);
					this.SendPropertyChanging();
					this._PaypalTransition = value;
					this.SendPropertyChanged("PaypalTransition");
					this.OnPaypalTransitionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Note", DbType="VarChar(MAX)")]
		public string Note
		{
			get
			{
				return this._Note;
			}
			set
			{
				if ((this._Note != value))
				{
					this.OnNoteChanging(value);
					this.SendPropertyChanging();
					this._Note = value;
					this.SendPropertyChanged("Note");
					this.OnNoteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_PaymentResult", Storage="_User", ThisKey="UserID", OtherKey="Id", IsForeignKey=true, DeleteRule="CASCADE")]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.PaymentResults.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.PaymentResults.Add(this);
						this._UserID = value.Id;
					}
					else
					{
						this._UserID = default(Nullable<int>);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[User]")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private string _Surname;
		
		private string _NickName;
		
		private string _Email;
		
		private string _Password;
		
		private string _Mobile;
		
		private System.Nullable<double> _Balance;
		
		private string _Note;
		
		private int _Role;
		
		private System.Nullable<int> _ParentID;
		
		private string _ResetToken;
		
		private System.Nullable<System.DateTime> _ResetTokenExpiry;
		
		private EntitySet<Ticket> _Tickets;
		
		private EntitySet<PaymentResult> _PaymentResults;
		
		private EntitySet<User> _Users;
		
		private EntitySet<Movement> _Movements;
		
		private EntitySet<Movement> _Movements1;
		
		private EntitySet<GameBoard> _GameBoards;
		
		private EntitySet<Feedback> _Feedbacks;
		
		private EntitySet<Winner> _Winners;
		
		private EntityRef<User> _User1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnSurnameChanging(string value);
    partial void OnSurnameChanged();
    partial void OnNickNameChanging(string value);
    partial void OnNickNameChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnMobileChanging(string value);
    partial void OnMobileChanged();
    partial void OnBalanceChanging(System.Nullable<double> value);
    partial void OnBalanceChanged();
    partial void OnNoteChanging(string value);
    partial void OnNoteChanged();
    partial void OnRoleChanging(int value);
    partial void OnRoleChanged();
    partial void OnParentIDChanging(System.Nullable<int> value);
    partial void OnParentIDChanged();
    partial void OnResetTokenChanging(string value);
    partial void OnResetTokenChanged();
    partial void OnResetTokenExpiryChanging(System.Nullable<System.DateTime> value);
    partial void OnResetTokenExpiryChanged();
    #endregion
		
		public User()
		{
			this._Tickets = new EntitySet<Ticket>(new Action<Ticket>(this.attach_Tickets), new Action<Ticket>(this.detach_Tickets));
			this._PaymentResults = new EntitySet<PaymentResult>(new Action<PaymentResult>(this.attach_PaymentResults), new Action<PaymentResult>(this.detach_PaymentResults));
			this._Users = new EntitySet<User>(new Action<User>(this.attach_Users), new Action<User>(this.detach_Users));
			this._Movements = new EntitySet<Movement>(new Action<Movement>(this.attach_Movements), new Action<Movement>(this.detach_Movements));
			this._Movements1 = new EntitySet<Movement>(new Action<Movement>(this.attach_Movements1), new Action<Movement>(this.detach_Movements1));
			this._GameBoards = new EntitySet<GameBoard>(new Action<GameBoard>(this.attach_GameBoards), new Action<GameBoard>(this.detach_GameBoards));
			this._Feedbacks = new EntitySet<Feedback>(new Action<Feedback>(this.attach_Feedbacks), new Action<Feedback>(this.detach_Feedbacks));
			this._Winners = new EntitySet<Winner>(new Action<Winner>(this.attach_Winners), new Action<Winner>(this.detach_Winners));
			this._User1 = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Surname", DbType="VarChar(50)")]
		public string Surname
		{
			get
			{
				return this._Surname;
			}
			set
			{
				if ((this._Surname != value))
				{
					this.OnSurnameChanging(value);
					this.SendPropertyChanging();
					this._Surname = value;
					this.SendPropertyChanged("Surname");
					this.OnSurnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NickName", DbType="VarChar(50)")]
		public string NickName
		{
			get
			{
				return this._NickName;
			}
			set
			{
				if ((this._NickName != value))
				{
					this.OnNickNameChanging(value);
					this.SendPropertyChanging();
					this._NickName = value;
					this.SendPropertyChanged("NickName");
					this.OnNickNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="VarChar(MAX)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="VarChar(MAX)")]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Mobile", DbType="VarChar(50)")]
		public string Mobile
		{
			get
			{
				return this._Mobile;
			}
			set
			{
				if ((this._Mobile != value))
				{
					this.OnMobileChanging(value);
					this.SendPropertyChanging();
					this._Mobile = value;
					this.SendPropertyChanged("Mobile");
					this.OnMobileChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Balance", DbType="Float")]
		public System.Nullable<double> Balance
		{
			get
			{
				return this._Balance;
			}
			set
			{
				if ((this._Balance != value))
				{
					this.OnBalanceChanging(value);
					this.SendPropertyChanging();
					this._Balance = value;
					this.SendPropertyChanged("Balance");
					this.OnBalanceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Note", DbType="VarChar(MAX)")]
		public string Note
		{
			get
			{
				return this._Note;
			}
			set
			{
				if ((this._Note != value))
				{
					this.OnNoteChanging(value);
					this.SendPropertyChanging();
					this._Note = value;
					this.SendPropertyChanged("Note");
					this.OnNoteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Role", DbType="Int NOT NULL")]
		public int Role
		{
			get
			{
				return this._Role;
			}
			set
			{
				if ((this._Role != value))
				{
					this.OnRoleChanging(value);
					this.SendPropertyChanging();
					this._Role = value;
					this.SendPropertyChanged("Role");
					this.OnRoleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParentID", DbType="Int")]
		public System.Nullable<int> ParentID
		{
			get
			{
				return this._ParentID;
			}
			set
			{
				if ((this._ParentID != value))
				{
					if (this._User1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnParentIDChanging(value);
					this.SendPropertyChanging();
					this._ParentID = value;
					this.SendPropertyChanged("ParentID");
					this.OnParentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ResetToken", DbType="VarChar(MAX)")]
		public string ResetToken
		{
			get
			{
				return this._ResetToken;
			}
			set
			{
				if ((this._ResetToken != value))
				{
					this.OnResetTokenChanging(value);
					this.SendPropertyChanging();
					this._ResetToken = value;
					this.SendPropertyChanged("ResetToken");
					this.OnResetTokenChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ResetTokenExpiry", DbType="DateTime")]
		public System.Nullable<System.DateTime> ResetTokenExpiry
		{
			get
			{
				return this._ResetTokenExpiry;
			}
			set
			{
				if ((this._ResetTokenExpiry != value))
				{
					this.OnResetTokenExpiryChanging(value);
					this.SendPropertyChanging();
					this._ResetTokenExpiry = value;
					this.SendPropertyChanged("ResetTokenExpiry");
					this.OnResetTokenExpiryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Ticket", Storage="_Tickets", ThisKey="Id", OtherKey="UserID")]
		public EntitySet<Ticket> Tickets
		{
			get
			{
				return this._Tickets;
			}
			set
			{
				this._Tickets.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_PaymentResult", Storage="_PaymentResults", ThisKey="Id", OtherKey="UserID")]
		public EntitySet<PaymentResult> PaymentResults
		{
			get
			{
				return this._PaymentResults;
			}
			set
			{
				this._PaymentResults.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_User", Storage="_Users", ThisKey="Id", OtherKey="ParentID")]
		public EntitySet<User> Users
		{
			get
			{
				return this._Users;
			}
			set
			{
				this._Users.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Movement", Storage="_Movements", ThisKey="Id", OtherKey="UserID")]
		public EntitySet<Movement> Movements
		{
			get
			{
				return this._Movements;
			}
			set
			{
				this._Movements.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Movement1", Storage="_Movements1", ThisKey="Id", OtherKey="SenderID")]
		public EntitySet<Movement> Movements1
		{
			get
			{
				return this._Movements1;
			}
			set
			{
				this._Movements1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_GameBoard", Storage="_GameBoards", ThisKey="Id", OtherKey="Creater")]
		public EntitySet<GameBoard> GameBoards
		{
			get
			{
				return this._GameBoards;
			}
			set
			{
				this._GameBoards.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Feedback", Storage="_Feedbacks", ThisKey="Id", OtherKey="Creater")]
		public EntitySet<Feedback> Feedbacks
		{
			get
			{
				return this._Feedbacks;
			}
			set
			{
				this._Feedbacks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Winner", Storage="_Winners", ThisKey="Id", OtherKey="UserID")]
		public EntitySet<Winner> Winners
		{
			get
			{
				return this._Winners;
			}
			set
			{
				this._Winners.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_User", Storage="_User1", ThisKey="ParentID", OtherKey="Id", IsForeignKey=true)]
		public User User1
		{
			get
			{
				return this._User1.Entity;
			}
			set
			{
				User previousValue = this._User1.Entity;
				if (((previousValue != value) 
							|| (this._User1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User1.Entity = null;
						previousValue.Users.Remove(this);
					}
					this._User1.Entity = value;
					if ((value != null))
					{
						value.Users.Add(this);
						this._ParentID = value.Id;
					}
					else
					{
						this._ParentID = default(Nullable<int>);
					}
					this.SendPropertyChanged("User1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Tickets(Ticket entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Tickets(Ticket entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_PaymentResults(PaymentResult entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_PaymentResults(PaymentResult entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.User1 = this;
		}
		
		private void detach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.User1 = null;
		}
		
		private void attach_Movements(Movement entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Movements(Movement entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Movements1(Movement entity)
		{
			this.SendPropertyChanging();
			entity.User1 = this;
		}
		
		private void detach_Movements1(Movement entity)
		{
			this.SendPropertyChanging();
			entity.User1 = null;
		}
		
		private void attach_GameBoards(GameBoard entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_GameBoards(GameBoard entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Feedbacks(Feedback entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Feedbacks(Feedback entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Winners(Winner entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Winners(Winner entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Movement")]
	public partial class Movement : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<int> _UserID;
		
		private System.Nullable<System.DateTime> _MoveDate;
		
		private System.Nullable<double> _Amount;
		
		private string _Description;
		
		private string _Note;
		
		private System.Nullable<int> _SenderID;
		
		private System.Nullable<int> _Type;
		
		private EntityRef<User> _User;
		
		private EntityRef<User> _User1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnUserIDChanging(System.Nullable<int> value);
    partial void OnUserIDChanged();
    partial void OnMoveDateChanging(System.Nullable<System.DateTime> value);
    partial void OnMoveDateChanged();
    partial void OnAmountChanging(System.Nullable<double> value);
    partial void OnAmountChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnNoteChanging(string value);
    partial void OnNoteChanged();
    partial void OnSenderIDChanging(System.Nullable<int> value);
    partial void OnSenderIDChanged();
    partial void OnTypeChanging(System.Nullable<int> value);
    partial void OnTypeChanged();
    #endregion
		
		public Movement()
		{
			this._User = default(EntityRef<User>);
			this._User1 = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int")]
		public System.Nullable<int> UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MoveDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> MoveDate
		{
			get
			{
				return this._MoveDate;
			}
			set
			{
				if ((this._MoveDate != value))
				{
					this.OnMoveDateChanging(value);
					this.SendPropertyChanging();
					this._MoveDate = value;
					this.SendPropertyChanged("MoveDate");
					this.OnMoveDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Amount", DbType="Float")]
		public System.Nullable<double> Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Note", DbType="VarChar(MAX)")]
		public string Note
		{
			get
			{
				return this._Note;
			}
			set
			{
				if ((this._Note != value))
				{
					this.OnNoteChanging(value);
					this.SendPropertyChanging();
					this._Note = value;
					this.SendPropertyChanged("Note");
					this.OnNoteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SenderID", DbType="Int")]
		public System.Nullable<int> SenderID
		{
			get
			{
				return this._SenderID;
			}
			set
			{
				if ((this._SenderID != value))
				{
					if (this._User1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSenderIDChanging(value);
					this.SendPropertyChanging();
					this._SenderID = value;
					this.SendPropertyChanged("SenderID");
					this.OnSenderIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="Int")]
		public System.Nullable<int> Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Movement", Storage="_User", ThisKey="UserID", OtherKey="Id", IsForeignKey=true, DeleteRule="CASCADE")]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Movements.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Movements.Add(this);
						this._UserID = value.Id;
					}
					else
					{
						this._UserID = default(Nullable<int>);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Movement1", Storage="_User1", ThisKey="SenderID", OtherKey="Id", IsForeignKey=true)]
		public User User1
		{
			get
			{
				return this._User1.Entity;
			}
			set
			{
				User previousValue = this._User1.Entity;
				if (((previousValue != value) 
							|| (this._User1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User1.Entity = null;
						previousValue.Movements1.Remove(this);
					}
					this._User1.Entity = value;
					if ((value != null))
					{
						value.Movements1.Add(this);
						this._SenderID = value.Id;
					}
					else
					{
						this._SenderID = default(Nullable<int>);
					}
					this.SendPropertyChanged("User1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TicketResult")]
	public partial class TicketResult : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<int> _TicketID;
		
		private System.Nullable<int> _RoundNo;
		
		private System.Nullable<int> _TeamID;
		
		private System.Nullable<int> _RoundResult;
		
		private string _Note;
		
		private EntityRef<Team> _Team;
		
		private EntityRef<Ticket> _Ticket;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnTicketIDChanging(System.Nullable<int> value);
    partial void OnTicketIDChanged();
    partial void OnRoundNoChanging(System.Nullable<int> value);
    partial void OnRoundNoChanged();
    partial void OnTeamIDChanging(System.Nullable<int> value);
    partial void OnTeamIDChanged();
    partial void OnRoundResultChanging(System.Nullable<int> value);
    partial void OnRoundResultChanged();
    partial void OnNoteChanging(string value);
    partial void OnNoteChanged();
    #endregion
		
		public TicketResult()
		{
			this._Team = default(EntityRef<Team>);
			this._Ticket = default(EntityRef<Ticket>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TicketID", DbType="Int")]
		public System.Nullable<int> TicketID
		{
			get
			{
				return this._TicketID;
			}
			set
			{
				if ((this._TicketID != value))
				{
					if (this._Ticket.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTicketIDChanging(value);
					this.SendPropertyChanging();
					this._TicketID = value;
					this.SendPropertyChanged("TicketID");
					this.OnTicketIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoundNo", DbType="Int")]
		public System.Nullable<int> RoundNo
		{
			get
			{
				return this._RoundNo;
			}
			set
			{
				if ((this._RoundNo != value))
				{
					this.OnRoundNoChanging(value);
					this.SendPropertyChanging();
					this._RoundNo = value;
					this.SendPropertyChanged("RoundNo");
					this.OnRoundNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeamID", DbType="Int")]
		public System.Nullable<int> TeamID
		{
			get
			{
				return this._TeamID;
			}
			set
			{
				if ((this._TeamID != value))
				{
					if (this._Team.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTeamIDChanging(value);
					this.SendPropertyChanging();
					this._TeamID = value;
					this.SendPropertyChanged("TeamID");
					this.OnTeamIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoundResult", DbType="Int")]
		public System.Nullable<int> RoundResult
		{
			get
			{
				return this._RoundResult;
			}
			set
			{
				if ((this._RoundResult != value))
				{
					this.OnRoundResultChanging(value);
					this.SendPropertyChanging();
					this._RoundResult = value;
					this.SendPropertyChanged("RoundResult");
					this.OnRoundResultChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Note", DbType="VarChar(MAX)")]
		public string Note
		{
			get
			{
				return this._Note;
			}
			set
			{
				if ((this._Note != value))
				{
					this.OnNoteChanging(value);
					this.SendPropertyChanging();
					this._Note = value;
					this.SendPropertyChanged("Note");
					this.OnNoteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Team_TicketResult", Storage="_Team", ThisKey="TeamID", OtherKey="Id", IsForeignKey=true, DeleteRule="CASCADE")]
		public Team Team
		{
			get
			{
				return this._Team.Entity;
			}
			set
			{
				Team previousValue = this._Team.Entity;
				if (((previousValue != value) 
							|| (this._Team.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Team.Entity = null;
						previousValue.TicketResults.Remove(this);
					}
					this._Team.Entity = value;
					if ((value != null))
					{
						value.TicketResults.Add(this);
						this._TeamID = value.Id;
					}
					else
					{
						this._TeamID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Team");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Ticket_TicketResult", Storage="_Ticket", ThisKey="TicketID", OtherKey="Id", IsForeignKey=true, DeleteRule="CASCADE")]
		public Ticket Ticket
		{
			get
			{
				return this._Ticket.Entity;
			}
			set
			{
				Ticket previousValue = this._Ticket.Entity;
				if (((previousValue != value) 
							|| (this._Ticket.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Ticket.Entity = null;
						previousValue.TicketResults.Remove(this);
					}
					this._Ticket.Entity = value;
					if ((value != null))
					{
						value.TicketResults.Add(this);
						this._TicketID = value.Id;
					}
					else
					{
						this._TicketID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Ticket");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Result")]
	public partial class Result : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<int> _TeamForGameID;
		
		private System.Nullable<int> _RoundNo;
		
		private System.Nullable<int> _RoundResult;
		
		private string _Note;
		
		private EntityRef<TeamsForGame> _TeamsForGame;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnTeamForGameIDChanging(System.Nullable<int> value);
    partial void OnTeamForGameIDChanged();
    partial void OnRoundNoChanging(System.Nullable<int> value);
    partial void OnRoundNoChanged();
    partial void OnRoundResultChanging(System.Nullable<int> value);
    partial void OnRoundResultChanged();
    partial void OnNoteChanging(string value);
    partial void OnNoteChanged();
    #endregion
		
		public Result()
		{
			this._TeamsForGame = default(EntityRef<TeamsForGame>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeamForGameID", DbType="Int")]
		public System.Nullable<int> TeamForGameID
		{
			get
			{
				return this._TeamForGameID;
			}
			set
			{
				if ((this._TeamForGameID != value))
				{
					if (this._TeamsForGame.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTeamForGameIDChanging(value);
					this.SendPropertyChanging();
					this._TeamForGameID = value;
					this.SendPropertyChanged("TeamForGameID");
					this.OnTeamForGameIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoundNo", DbType="Int")]
		public System.Nullable<int> RoundNo
		{
			get
			{
				return this._RoundNo;
			}
			set
			{
				if ((this._RoundNo != value))
				{
					this.OnRoundNoChanging(value);
					this.SendPropertyChanging();
					this._RoundNo = value;
					this.SendPropertyChanged("RoundNo");
					this.OnRoundNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoundResult", DbType="Int")]
		public System.Nullable<int> RoundResult
		{
			get
			{
				return this._RoundResult;
			}
			set
			{
				if ((this._RoundResult != value))
				{
					this.OnRoundResultChanging(value);
					this.SendPropertyChanging();
					this._RoundResult = value;
					this.SendPropertyChanged("RoundResult");
					this.OnRoundResultChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Note", DbType="VarChar(MAX)")]
		public string Note
		{
			get
			{
				return this._Note;
			}
			set
			{
				if ((this._Note != value))
				{
					this.OnNoteChanging(value);
					this.SendPropertyChanging();
					this._Note = value;
					this.SendPropertyChanged("Note");
					this.OnNoteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TeamsForGame_Result", Storage="_TeamsForGame", ThisKey="TeamForGameID", OtherKey="Id", IsForeignKey=true, DeleteRule="CASCADE")]
		public TeamsForGame TeamsForGame
		{
			get
			{
				return this._TeamsForGame.Entity;
			}
			set
			{
				TeamsForGame previousValue = this._TeamsForGame.Entity;
				if (((previousValue != value) 
							|| (this._TeamsForGame.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TeamsForGame.Entity = null;
						previousValue.Results.Remove(this);
					}
					this._TeamsForGame.Entity = value;
					if ((value != null))
					{
						value.Results.Add(this);
						this._TeamForGameID = value.Id;
					}
					else
					{
						this._TeamForGameID = default(Nullable<int>);
					}
					this.SendPropertyChanged("TeamsForGame");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Notifications")]
	public partial class Notification : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Title;
		
		private string _Description;
		
		private System.Nullable<System.DateTime> _CreatedDate;
		
		private System.Nullable<bool> _IsNew;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnCreatedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedDateChanged();
    partial void OnIsNewChanging(System.Nullable<bool> value);
    partial void OnIsNewChanged();
    #endregion
		
		public Notification()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="VarChar(MAX)")]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsNew", DbType="Bit")]
		public System.Nullable<bool> IsNew
		{
			get
			{
				return this._IsNew;
			}
			set
			{
				if ((this._IsNew != value))
				{
					this.OnIsNewChanging(value);
					this.SendPropertyChanging();
					this._IsNew = value;
					this.SendPropertyChanged("IsNew");
					this.OnIsNewChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.GameBoard")]
	public partial class GameBoard : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<int> _GameID;
		
		private System.Nullable<int> _Creater;
		
		private System.Nullable<System.DateTime> _CreatedDate;
		
		private string _Title;
		
		private string _Description;
		
		private System.Nullable<bool> _IsNew;
		
		private EntityRef<User> _User;
		
		private EntityRef<Game> _Game;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnGameIDChanging(System.Nullable<int> value);
    partial void OnGameIDChanged();
    partial void OnCreaterChanging(System.Nullable<int> value);
    partial void OnCreaterChanged();
    partial void OnCreatedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedDateChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnIsNewChanging(System.Nullable<bool> value);
    partial void OnIsNewChanged();
    #endregion
		
		public GameBoard()
		{
			this._User = default(EntityRef<User>);
			this._Game = default(EntityRef<Game>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GameID", DbType="Int")]
		public System.Nullable<int> GameID
		{
			get
			{
				return this._GameID;
			}
			set
			{
				if ((this._GameID != value))
				{
					if (this._Game.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGameIDChanging(value);
					this.SendPropertyChanging();
					this._GameID = value;
					this.SendPropertyChanged("GameID");
					this.OnGameIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Creater", DbType="Int")]
		public System.Nullable<int> Creater
		{
			get
			{
				return this._Creater;
			}
			set
			{
				if ((this._Creater != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCreaterChanging(value);
					this.SendPropertyChanging();
					this._Creater = value;
					this.SendPropertyChanged("Creater");
					this.OnCreaterChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="VarChar(MAX)")]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsNew", DbType="Bit")]
		public System.Nullable<bool> IsNew
		{
			get
			{
				return this._IsNew;
			}
			set
			{
				if ((this._IsNew != value))
				{
					this.OnIsNewChanging(value);
					this.SendPropertyChanging();
					this._IsNew = value;
					this.SendPropertyChanged("IsNew");
					this.OnIsNewChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_GameBoard", Storage="_User", ThisKey="Creater", OtherKey="Id", IsForeignKey=true, DeleteRule="CASCADE")]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.GameBoards.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.GameBoards.Add(this);
						this._Creater = value.Id;
					}
					else
					{
						this._Creater = default(Nullable<int>);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Game_GameBoard", Storage="_Game", ThisKey="GameID", OtherKey="Id", IsForeignKey=true, DeleteRule="CASCADE")]
		public Game Game
		{
			get
			{
				return this._Game.Entity;
			}
			set
			{
				Game previousValue = this._Game.Entity;
				if (((previousValue != value) 
							|| (this._Game.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Game.Entity = null;
						previousValue.GameBoards.Remove(this);
					}
					this._Game.Entity = value;
					if ((value != null))
					{
						value.GameBoards.Add(this);
						this._GameID = value.Id;
					}
					else
					{
						this._GameID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Game");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Feedback")]
	public partial class Feedback : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Title;
		
		private string _Description;
		
		private System.Nullable<int> _Creater;
		
		private System.Nullable<System.DateTime> _CreatedDate;
		
		private System.Nullable<bool> _IsNew;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnCreaterChanging(System.Nullable<int> value);
    partial void OnCreaterChanged();
    partial void OnCreatedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedDateChanged();
    partial void OnIsNewChanging(System.Nullable<bool> value);
    partial void OnIsNewChanged();
    #endregion
		
		public Feedback()
		{
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="VarChar(MAX)")]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Creater", DbType="Int")]
		public System.Nullable<int> Creater
		{
			get
			{
				return this._Creater;
			}
			set
			{
				if ((this._Creater != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCreaterChanging(value);
					this.SendPropertyChanging();
					this._Creater = value;
					this.SendPropertyChanged("Creater");
					this.OnCreaterChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsNew", DbType="Bit")]
		public System.Nullable<bool> IsNew
		{
			get
			{
				return this._IsNew;
			}
			set
			{
				if ((this._IsNew != value))
				{
					this.OnIsNewChanging(value);
					this.SendPropertyChanging();
					this._IsNew = value;
					this.SendPropertyChanged("IsNew");
					this.OnIsNewChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Feedback", Storage="_User", ThisKey="Creater", OtherKey="Id", IsForeignKey=true, DeleteRule="CASCADE")]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Feedbacks.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Feedbacks.Add(this);
						this._Creater = value.Id;
					}
					else
					{
						this._Creater = default(Nullable<int>);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Winner")]
	public partial class Winner : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<int> _GameID;
		
		private System.Nullable<int> _UserID;
		
		private System.Nullable<double> _Prize;
		
		private string _Note;
		
		private System.Nullable<System.DateTime> _WinDate;
		
		private System.Nullable<double> _Rate;
		
		private System.Nullable<System.DateTime> _DivideDate;
		
		private EntityRef<User> _User;
		
		private EntityRef<Game> _Game;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnGameIDChanging(System.Nullable<int> value);
    partial void OnGameIDChanged();
    partial void OnUserIDChanging(System.Nullable<int> value);
    partial void OnUserIDChanged();
    partial void OnPrizeChanging(System.Nullable<double> value);
    partial void OnPrizeChanged();
    partial void OnNoteChanging(string value);
    partial void OnNoteChanged();
    partial void OnWinDateChanging(System.Nullable<System.DateTime> value);
    partial void OnWinDateChanged();
    partial void OnRateChanging(System.Nullable<double> value);
    partial void OnRateChanged();
    partial void OnDivideDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDivideDateChanged();
    #endregion
		
		public Winner()
		{
			this._User = default(EntityRef<User>);
			this._Game = default(EntityRef<Game>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GameID", DbType="Int")]
		public System.Nullable<int> GameID
		{
			get
			{
				return this._GameID;
			}
			set
			{
				if ((this._GameID != value))
				{
					if (this._Game.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGameIDChanging(value);
					this.SendPropertyChanging();
					this._GameID = value;
					this.SendPropertyChanged("GameID");
					this.OnGameIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int")]
		public System.Nullable<int> UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Prize", DbType="Float")]
		public System.Nullable<double> Prize
		{
			get
			{
				return this._Prize;
			}
			set
			{
				if ((this._Prize != value))
				{
					this.OnPrizeChanging(value);
					this.SendPropertyChanging();
					this._Prize = value;
					this.SendPropertyChanged("Prize");
					this.OnPrizeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Note", DbType="VarChar(MAX)")]
		public string Note
		{
			get
			{
				return this._Note;
			}
			set
			{
				if ((this._Note != value))
				{
					this.OnNoteChanging(value);
					this.SendPropertyChanging();
					this._Note = value;
					this.SendPropertyChanged("Note");
					this.OnNoteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WinDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> WinDate
		{
			get
			{
				return this._WinDate;
			}
			set
			{
				if ((this._WinDate != value))
				{
					this.OnWinDateChanging(value);
					this.SendPropertyChanging();
					this._WinDate = value;
					this.SendPropertyChanged("WinDate");
					this.OnWinDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Rate", DbType="Float")]
		public System.Nullable<double> Rate
		{
			get
			{
				return this._Rate;
			}
			set
			{
				if ((this._Rate != value))
				{
					this.OnRateChanging(value);
					this.SendPropertyChanging();
					this._Rate = value;
					this.SendPropertyChanged("Rate");
					this.OnRateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DivideDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> DivideDate
		{
			get
			{
				return this._DivideDate;
			}
			set
			{
				if ((this._DivideDate != value))
				{
					this.OnDivideDateChanging(value);
					this.SendPropertyChanging();
					this._DivideDate = value;
					this.SendPropertyChanged("DivideDate");
					this.OnDivideDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Winner", Storage="_User", ThisKey="UserID", OtherKey="Id", IsForeignKey=true, DeleteRule="CASCADE")]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Winners.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Winners.Add(this);
						this._UserID = value.Id;
					}
					else
					{
						this._UserID = default(Nullable<int>);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Game_Winner", Storage="_Game", ThisKey="GameID", OtherKey="Id", IsForeignKey=true, DeleteRule="CASCADE")]
		public Game Game
		{
			get
			{
				return this._Game.Entity;
			}
			set
			{
				Game previousValue = this._Game.Entity;
				if (((previousValue != value) 
							|| (this._Game.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Game.Entity = null;
						previousValue.Winners.Remove(this);
					}
					this._Game.Entity = value;
					if ((value != null))
					{
						value.Winners.Add(this);
						this._GameID = value.Id;
					}
					else
					{
						this._GameID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Game");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Game")]
	public partial class Game : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<System.DateTime> _StartDate;
		
		private System.Nullable<System.DateTime> _EndDate;
		
		private System.Nullable<int> _NumberOfTeams;
		
		private System.Nullable<int> _MinPlayers;
		
		private System.Nullable<double> _Fee;
		
		private System.Nullable<double> _Tax;
		
		private System.Nullable<int> _Status;
		
		private string _Note;
		
		private string _Title;
		
		private System.Nullable<int> _RealPlayers;
		
		private System.Nullable<double> _Prize;
		
		private System.Nullable<double> _PercentForFirst;
		
		private System.Nullable<double> _PercentForSecond;
		
		private System.Nullable<double> _PercentForThird;
		
		private System.Nullable<double> _PercentForForth;
		
		private System.Nullable<double> _PercentForFifth;
		
		private System.Nullable<int> _NumOfWinners;
		
		private string _Image1;
		
		private string _Image2;
		
		private System.Nullable<bool> _AllowedBoard;
		
		private string _Image3;
		
		private EntitySet<TeamsForGame> _TeamsForGames;
		
		private EntitySet<Ticket> _Tickets;
		
		private EntitySet<GameBoard> _GameBoards;
		
		private EntitySet<Winner> _Winners;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnStartDateChanging(System.Nullable<System.DateTime> value);
    partial void OnStartDateChanged();
    partial void OnEndDateChanging(System.Nullable<System.DateTime> value);
    partial void OnEndDateChanged();
    partial void OnNumberOfTeamsChanging(System.Nullable<int> value);
    partial void OnNumberOfTeamsChanged();
    partial void OnMinPlayersChanging(System.Nullable<int> value);
    partial void OnMinPlayersChanged();
    partial void OnFeeChanging(System.Nullable<double> value);
    partial void OnFeeChanged();
    partial void OnTaxChanging(System.Nullable<double> value);
    partial void OnTaxChanged();
    partial void OnStatusChanging(System.Nullable<int> value);
    partial void OnStatusChanged();
    partial void OnNoteChanging(string value);
    partial void OnNoteChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnRealPlayersChanging(System.Nullable<int> value);
    partial void OnRealPlayersChanged();
    partial void OnPrizeChanging(System.Nullable<double> value);
    partial void OnPrizeChanged();
    partial void OnPercentForFirstChanging(System.Nullable<double> value);
    partial void OnPercentForFirstChanged();
    partial void OnPercentForSecondChanging(System.Nullable<double> value);
    partial void OnPercentForSecondChanged();
    partial void OnPercentForThirdChanging(System.Nullable<double> value);
    partial void OnPercentForThirdChanged();
    partial void OnPercentForForthChanging(System.Nullable<double> value);
    partial void OnPercentForForthChanged();
    partial void OnPercentForFifthChanging(System.Nullable<double> value);
    partial void OnPercentForFifthChanged();
    partial void OnNumOfWinnersChanging(System.Nullable<int> value);
    partial void OnNumOfWinnersChanged();
    partial void OnImage1Changing(string value);
    partial void OnImage1Changed();
    partial void OnImage2Changing(string value);
    partial void OnImage2Changed();
    partial void OnAllowedBoardChanging(System.Nullable<bool> value);
    partial void OnAllowedBoardChanged();
    partial void OnImage3Changing(string value);
    partial void OnImage3Changed();
    #endregion
		
		public Game()
		{
			this._TeamsForGames = new EntitySet<TeamsForGame>(new Action<TeamsForGame>(this.attach_TeamsForGames), new Action<TeamsForGame>(this.detach_TeamsForGames));
			this._Tickets = new EntitySet<Ticket>(new Action<Ticket>(this.attach_Tickets), new Action<Ticket>(this.detach_Tickets));
			this._GameBoards = new EntitySet<GameBoard>(new Action<GameBoard>(this.attach_GameBoards), new Action<GameBoard>(this.detach_GameBoards));
			this._Winners = new EntitySet<Winner>(new Action<Winner>(this.attach_Winners), new Action<Winner>(this.detach_Winners));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> StartDate
		{
			get
			{
				return this._StartDate;
			}
			set
			{
				if ((this._StartDate != value))
				{
					this.OnStartDateChanging(value);
					this.SendPropertyChanging();
					this._StartDate = value;
					this.SendPropertyChanged("StartDate");
					this.OnStartDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this.OnEndDateChanging(value);
					this.SendPropertyChanging();
					this._EndDate = value;
					this.SendPropertyChanged("EndDate");
					this.OnEndDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NumberOfTeams", DbType="Int")]
		public System.Nullable<int> NumberOfTeams
		{
			get
			{
				return this._NumberOfTeams;
			}
			set
			{
				if ((this._NumberOfTeams != value))
				{
					this.OnNumberOfTeamsChanging(value);
					this.SendPropertyChanging();
					this._NumberOfTeams = value;
					this.SendPropertyChanged("NumberOfTeams");
					this.OnNumberOfTeamsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MinPlayers", DbType="Int")]
		public System.Nullable<int> MinPlayers
		{
			get
			{
				return this._MinPlayers;
			}
			set
			{
				if ((this._MinPlayers != value))
				{
					this.OnMinPlayersChanging(value);
					this.SendPropertyChanging();
					this._MinPlayers = value;
					this.SendPropertyChanged("MinPlayers");
					this.OnMinPlayersChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Fee", DbType="Float")]
		public System.Nullable<double> Fee
		{
			get
			{
				return this._Fee;
			}
			set
			{
				if ((this._Fee != value))
				{
					this.OnFeeChanging(value);
					this.SendPropertyChanging();
					this._Fee = value;
					this.SendPropertyChanged("Fee");
					this.OnFeeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Tax", DbType="Float")]
		public System.Nullable<double> Tax
		{
			get
			{
				return this._Tax;
			}
			set
			{
				if ((this._Tax != value))
				{
					this.OnTaxChanging(value);
					this.SendPropertyChanging();
					this._Tax = value;
					this.SendPropertyChanged("Tax");
					this.OnTaxChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="Int")]
		public System.Nullable<int> Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Note", DbType="VarChar(MAX)")]
		public string Note
		{
			get
			{
				return this._Note;
			}
			set
			{
				if ((this._Note != value))
				{
					this.OnNoteChanging(value);
					this.SendPropertyChanging();
					this._Note = value;
					this.SendPropertyChanged("Note");
					this.OnNoteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="VarChar(MAX)")]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RealPlayers", DbType="Int")]
		public System.Nullable<int> RealPlayers
		{
			get
			{
				return this._RealPlayers;
			}
			set
			{
				if ((this._RealPlayers != value))
				{
					this.OnRealPlayersChanging(value);
					this.SendPropertyChanging();
					this._RealPlayers = value;
					this.SendPropertyChanged("RealPlayers");
					this.OnRealPlayersChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Prize", DbType="Float")]
		public System.Nullable<double> Prize
		{
			get
			{
				return this._Prize;
			}
			set
			{
				if ((this._Prize != value))
				{
					this.OnPrizeChanging(value);
					this.SendPropertyChanging();
					this._Prize = value;
					this.SendPropertyChanged("Prize");
					this.OnPrizeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PercentForFirst", DbType="Float")]
		public System.Nullable<double> PercentForFirst
		{
			get
			{
				return this._PercentForFirst;
			}
			set
			{
				if ((this._PercentForFirst != value))
				{
					this.OnPercentForFirstChanging(value);
					this.SendPropertyChanging();
					this._PercentForFirst = value;
					this.SendPropertyChanged("PercentForFirst");
					this.OnPercentForFirstChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PercentForSecond", DbType="Float")]
		public System.Nullable<double> PercentForSecond
		{
			get
			{
				return this._PercentForSecond;
			}
			set
			{
				if ((this._PercentForSecond != value))
				{
					this.OnPercentForSecondChanging(value);
					this.SendPropertyChanging();
					this._PercentForSecond = value;
					this.SendPropertyChanged("PercentForSecond");
					this.OnPercentForSecondChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PercentForThird", DbType="Float")]
		public System.Nullable<double> PercentForThird
		{
			get
			{
				return this._PercentForThird;
			}
			set
			{
				if ((this._PercentForThird != value))
				{
					this.OnPercentForThirdChanging(value);
					this.SendPropertyChanging();
					this._PercentForThird = value;
					this.SendPropertyChanged("PercentForThird");
					this.OnPercentForThirdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PercentForForth", DbType="Float")]
		public System.Nullable<double> PercentForForth
		{
			get
			{
				return this._PercentForForth;
			}
			set
			{
				if ((this._PercentForForth != value))
				{
					this.OnPercentForForthChanging(value);
					this.SendPropertyChanging();
					this._PercentForForth = value;
					this.SendPropertyChanged("PercentForForth");
					this.OnPercentForForthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PercentForFifth", DbType="Float")]
		public System.Nullable<double> PercentForFifth
		{
			get
			{
				return this._PercentForFifth;
			}
			set
			{
				if ((this._PercentForFifth != value))
				{
					this.OnPercentForFifthChanging(value);
					this.SendPropertyChanging();
					this._PercentForFifth = value;
					this.SendPropertyChanged("PercentForFifth");
					this.OnPercentForFifthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NumOfWinners", DbType="Int")]
		public System.Nullable<int> NumOfWinners
		{
			get
			{
				return this._NumOfWinners;
			}
			set
			{
				if ((this._NumOfWinners != value))
				{
					this.OnNumOfWinnersChanging(value);
					this.SendPropertyChanging();
					this._NumOfWinners = value;
					this.SendPropertyChanged("NumOfWinners");
					this.OnNumOfWinnersChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Image1", DbType="VarChar(MAX)")]
		public string Image1
		{
			get
			{
				return this._Image1;
			}
			set
			{
				if ((this._Image1 != value))
				{
					this.OnImage1Changing(value);
					this.SendPropertyChanging();
					this._Image1 = value;
					this.SendPropertyChanged("Image1");
					this.OnImage1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Image2", DbType="VarChar(MAX)")]
		public string Image2
		{
			get
			{
				return this._Image2;
			}
			set
			{
				if ((this._Image2 != value))
				{
					this.OnImage2Changing(value);
					this.SendPropertyChanging();
					this._Image2 = value;
					this.SendPropertyChanged("Image2");
					this.OnImage2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AllowedBoard", DbType="Bit")]
		public System.Nullable<bool> AllowedBoard
		{
			get
			{
				return this._AllowedBoard;
			}
			set
			{
				if ((this._AllowedBoard != value))
				{
					this.OnAllowedBoardChanging(value);
					this.SendPropertyChanging();
					this._AllowedBoard = value;
					this.SendPropertyChanged("AllowedBoard");
					this.OnAllowedBoardChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Image3", DbType="VarChar(MAX)")]
		public string Image3
		{
			get
			{
				return this._Image3;
			}
			set
			{
				if ((this._Image3 != value))
				{
					this.OnImage3Changing(value);
					this.SendPropertyChanging();
					this._Image3 = value;
					this.SendPropertyChanged("Image3");
					this.OnImage3Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Game_TeamsForGame", Storage="_TeamsForGames", ThisKey="Id", OtherKey="GameID")]
		public EntitySet<TeamsForGame> TeamsForGames
		{
			get
			{
				return this._TeamsForGames;
			}
			set
			{
				this._TeamsForGames.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Game_Ticket", Storage="_Tickets", ThisKey="Id", OtherKey="GameID")]
		public EntitySet<Ticket> Tickets
		{
			get
			{
				return this._Tickets;
			}
			set
			{
				this._Tickets.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Game_GameBoard", Storage="_GameBoards", ThisKey="Id", OtherKey="GameID")]
		public EntitySet<GameBoard> GameBoards
		{
			get
			{
				return this._GameBoards;
			}
			set
			{
				this._GameBoards.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Game_Winner", Storage="_Winners", ThisKey="Id", OtherKey="GameID")]
		public EntitySet<Winner> Winners
		{
			get
			{
				return this._Winners;
			}
			set
			{
				this._Winners.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TeamsForGames(TeamsForGame entity)
		{
			this.SendPropertyChanging();
			entity.Game = this;
		}
		
		private void detach_TeamsForGames(TeamsForGame entity)
		{
			this.SendPropertyChanging();
			entity.Game = null;
		}
		
		private void attach_Tickets(Ticket entity)
		{
			this.SendPropertyChanging();
			entity.Game = this;
		}
		
		private void detach_Tickets(Ticket entity)
		{
			this.SendPropertyChanging();
			entity.Game = null;
		}
		
		private void attach_GameBoards(GameBoard entity)
		{
			this.SendPropertyChanging();
			entity.Game = this;
		}
		
		private void detach_GameBoards(GameBoard entity)
		{
			this.SendPropertyChanging();
			entity.Game = null;
		}
		
		private void attach_Winners(Winner entity)
		{
			this.SendPropertyChanging();
			entity.Game = this;
		}
		
		private void detach_Winners(Winner entity)
		{
			this.SendPropertyChanging();
			entity.Game = null;
		}
	}
}
#pragma warning restore 1591
